scalar Point
scalar DateTime
scalar PointInput

type User {
  userId: ID!
  name: String
}

type Investor {
  investorId: ID!
  name: String
  interests: [Category] @relationship(type: "IN_INTEREST", direction: OUT)
}

type Business {
  businessId: ID!
  name: String!
  address: String
  city: String
  state: String
  location: Point
  categories: [Category] @relationship(type: "IN_CATEGORY", direction: OUT)
}

type Category {
  categoryId: ID!
  name: String
  businesses: [Business] @relationship(type: "IN_CATEGORY", direction: IN)
  investorInterest: [Investor] @relationship(type: "IN_INTEREST", direction: IN)
}

type Mutation {
  mergeBusinessCategory(category: ID!, businessId: ID!): Business
    @cypher(
      statement: "MATCH (b:Business {businessId: $businessId}) UNWIND $category AS cat MERGE (c:Category {name: cat}) MERGE (b)-[:IN_CATEGORY]->(c) RETURN b"
    )

  mergeInvestorInterest(category: ID!, investorId: ID!): Business
    @cypher(
      statement: "MATCH (i:Investor {investorId: $investorId}) UNWIND $category AS cat MERGE (c:Category {name: cat}) MERGE (i)-[:IN_INTEREST]->(c) RETURN i"
    )
}

type Query {
  userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")

  getUsers: [User]! @cypher(statement: "MATCH (u:User) RETURN u")

  getSuggestions(investorId: ID!): [Business]!
    @cypher(
      statement: "MATCH (i:Investor {investorId: $investorId})-[:IN_INTEREST]->(c:Category)<-[:IN_CATEGORY]-(b:Business) RETURN b"
    )

  getInvestorLinks: [InvestorLink]!
    @cypher(
      statement: "MATCH (investor:Investor)-[:IN_INTEREST]->(category:Category) RETURN {investorId: investor.investorId, categoryId: category.categoryId}"
    )

  getBusinessLinks: [BusinessLink]!
    @cypher(
      statement: "MATCH (b:Business)-[:IN_CATEGORY]->(category:Category) RETURN {businessId: b.businessId, categoryId: category.categoryId}"
    )
}


type InvestorLink {
  investorId: ID!
  categoryId: ID!
}

type BusinessLink {
  businessId: ID!
  categoryId: ID!
}